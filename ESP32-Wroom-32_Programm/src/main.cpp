
// Benötigte C/C++ Header
#include <stdio.h>
#include <string.h>
#include <esp_timer.h>

// Benötigte ESP-IDF / FreeRTOS Header
#include "esp_log.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"

// Benötigte Header für die native TFLM API (bleiben gleich)
#include "tensorflow/lite/micro/micro_interpreter.h"
#include "tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "tensorflow/lite/schema/schema_generated.h"

// Dein konvertiertes Modell und die Testdaten (bleiben gleich)
#include "model_data_2.h"

// Input ist ein 28x28 Pixel großes Bild
constexpr int kInputSize = 28 * 28;
// Output sind 10 "Wahrscheinlichkeiten" für die Ziffern 0-9
constexpr int kOutputSize = 10;
// Die Tensor Arena muss groß genug sein.
constexpr int kTensorArenaSize = 60 * 1024;

// Buffer für die Tensor Arena
uint8_t* tensor_arena = nullptr;

// Globale Variablen für das TFLM-Setup
const tflite::Model* model = nullptr;
tflite::MicroInterpreter* interpreter = nullptr;
TfLiteTensor* input = nullptr;
TfLiteTensor* output = nullptr;

float sample_digit_2[784] = {
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.454902f, 0.490196f, 0.670588f, 1.000000f, 
    1.000000f, 0.588235f, 0.364706f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.662745f, 0.992157f, 0.992157f, 0.992157f, 0.992157f, 
    0.992157f, 0.992157f, 0.854902f, 0.117647f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.662745f, 0.992157f, 0.992157f, 0.992157f, 0.835294f, 0.556863f, 
    0.690196f, 0.992157f, 0.992157f, 0.478431f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.203922f, 0.980392f, 0.992157f, 0.823529f, 0.125490f, 0.047059f, 0.000000f, 
    0.023529f, 0.807843f, 0.992157f, 0.549020f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.301961f, 0.984314f, 0.823529f, 0.098039f, 0.000000f, 0.000000f, 0.000000f, 
    0.478431f, 0.972549f, 0.992157f, 0.254902f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.121569f, 0.070588f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.819608f, 0.992157f, 0.992157f, 0.254902f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.458824f, 
    0.968627f, 0.992157f, 0.776471f, 0.039216f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.298039f, 0.968627f, 
    0.992157f, 0.905882f, 0.247059f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.501961f, 0.992157f, 
    0.992157f, 0.564706f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.690196f, 0.964706f, 0.992157f, 
    0.623529f, 0.047059f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.098039f, 0.917647f, 0.992157f, 0.913725f, 
    0.137255f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.776471f, 0.992157f, 0.992157f, 0.552941f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.305882f, 0.972549f, 0.992157f, 0.741176f, 0.047059f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.074510f, 0.784314f, 0.992157f, 0.992157f, 0.552941f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.525490f, 0.992157f, 0.992157f, 0.678431f, 0.047059f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.972549f, 0.992157f, 0.992157f, 0.098039f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.972549f, 0.992157f, 0.992157f, 0.168627f, 0.078431f, 0.078431f, 
    0.078431f, 0.078431f, 0.019608f, 0.000000f, 0.019608f, 0.078431f, 0.078431f, 0.145098f, 0.588235f, 0.588235f, 0.588235f, 0.576471f, 0.039216f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.972549f, 0.992157f, 0.992157f, 0.992157f, 0.992157f, 0.992157f, 
    0.992157f, 0.992157f, 0.658824f, 0.560784f, 0.650980f, 0.992157f, 0.992157f, 0.992157f, 0.992157f, 0.992157f, 0.992157f, 0.992157f, 0.482353f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.682353f, 0.992157f, 0.992157f, 0.992157f, 0.992157f, 0.992157f, 
    0.992157f, 0.992157f, 0.992157f, 0.992157f, 0.992157f, 0.992157f, 0.976471f, 0.968627f, 0.968627f, 0.662745f, 0.458824f, 0.458824f, 0.223529f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.462745f, 0.482353f, 0.482353f, 0.482353f, 0.650980f, 
    0.992157f, 0.992157f, 0.992157f, 0.607843f, 0.482353f, 0.482353f, 0.160784f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f
};

float sample_digit_6[784] = {
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.027451f, 0.800000f, 0.992157f, 0.690196f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.027451f, 0.588235f, 0.988235f, 0.988235f, 0.490196f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.458824f, 0.988235f, 0.729412f, 0.219608f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.552941f, 0.988235f, 0.462745f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.603922f, 0.968627f, 0.196078f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.101961f, 0.992157f, 0.768627f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.588235f, 0.992157f, 0.768627f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.223529f, 0.333333f, 0.333333f, 0.149020f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.882353f, 0.992157f, 0.376471f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.592157f, 0.886275f, 0.952941f, 0.988235f, 0.988235f, 0.933333f, 0.490196f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.039216f, 0.898039f, 0.886275f, 0.000000f, 0.000000f, 0.000000f, 0.015686f, 
    0.211765f, 0.898039f, 0.992157f, 1.000000f, 0.917647f, 0.686275f, 0.882353f, 1.000000f, 0.894118f, 0.121569f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.431373f, 0.988235f, 0.588235f, 0.000000f, 0.000000f, 0.101961f, 0.501961f, 
    0.988235f, 0.988235f, 0.890196f, 0.525490f, 0.109804f, 0.000000f, 0.000000f, 0.698039f, 0.988235f, 0.219608f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.623529f, 0.988235f, 0.443137f, 0.000000f, 0.000000f, 0.588235f, 0.992157f, 
    0.988235f, 0.729412f, 0.168627f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.552941f, 0.988235f, 0.219608f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.725490f, 0.988235f, 0.443137f, 0.000000f, 0.149020f, 0.929412f, 0.992157f, 
    0.592157f, 0.023529f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.552941f, 0.792157f, 0.023529f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.776471f, 0.992157f, 0.447059f, 0.000000f, 0.576471f, 0.992157f, 0.639216f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.603922f, 0.772549f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.772549f, 0.988235f, 0.443137f, 0.000000f, 0.674510f, 0.988235f, 0.737255f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.101961f, 0.992157f, 0.670588f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.772549f, 0.988235f, 0.443137f, 0.000000f, 0.074510f, 0.905882f, 0.968627f, 
    0.478431f, 0.074510f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.784314f, 0.956863f, 0.219608f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.101961f, 0.870588f, 0.988235f, 0.443137f, 0.000000f, 0.000000f, 0.098039f, 0.796078f, 
    0.988235f, 0.756863f, 0.050980f, 0.000000f, 0.298039f, 0.784314f, 0.976471f, 0.490196f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.725490f, 0.992157f, 0.701961f, 0.039216f, 0.000000f, 0.000000f, 0.000000f, 
    0.298039f, 0.137255f, 0.113725f, 0.603922f, 0.992157f, 0.956863f, 0.490196f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.109804f, 0.819608f, 0.992157f, 0.768627f, 0.321569f, 0.223529f, 0.223529f, 
    0.513725f, 0.772549f, 0.988235f, 0.992157f, 0.839216f, 0.317647f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.098039f, 0.847059f, 0.988235f, 0.988235f, 0.988235f, 0.992157f, 
    0.988235f, 0.988235f, 0.988235f, 0.611765f, 0.074510f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.062745f, 0.403922f, 0.545098f, 0.941176f, 0.549020f, 
    0.545098f, 0.545098f, 0.156863f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f
};

float sample_digit_7[784] = {
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.329412f, 0.725490f, 0.623529f, 0.592157f, 0.235294f, 0.141176f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.870588f, 0.996078f, 0.996078f, 0.996078f, 0.996078f, 0.945098f, 0.776471f, 0.776471f, 
    0.776471f, 0.776471f, 0.776471f, 0.776471f, 0.776471f, 0.776471f, 0.666667f, 0.203922f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.262745f, 0.447059f, 0.282353f, 0.447059f, 0.639216f, 0.890196f, 0.996078f, 0.882353f, 
    0.996078f, 0.996078f, 0.996078f, 0.980392f, 0.898039f, 0.996078f, 0.996078f, 0.549020f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.066667f, 0.258824f, 0.054902f, 
    0.262745f, 0.262745f, 0.262745f, 0.231373f, 0.082353f, 0.925490f, 0.996078f, 0.415686f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.325490f, 0.992157f, 0.819608f, 0.070588f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.086275f, 0.913725f, 1.000000f, 0.325490f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.505882f, 0.996078f, 0.933333f, 0.172549f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.231373f, 0.976471f, 0.996078f, 0.243137f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.521569f, 0.996078f, 0.733333f, 0.019608f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.035294f, 0.803922f, 0.972549f, 0.227451f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.494118f, 0.996078f, 0.713725f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.294118f, 0.984314f, 0.941176f, 0.223529f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.074510f, 
    0.866667f, 0.996078f, 0.650980f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.011765f, 0.796078f, 
    0.996078f, 0.858824f, 0.137255f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.149020f, 0.996078f, 
    0.996078f, 0.301961f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.121569f, 0.878431f, 0.996078f, 
    0.450980f, 0.003922f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.521569f, 0.996078f, 0.996078f, 
    0.203922f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.239216f, 0.949020f, 0.996078f, 0.996078f, 
    0.203922f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.474510f, 0.996078f, 0.996078f, 0.858824f, 
    0.156863f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.474510f, 0.996078f, 0.811765f, 0.070588f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 
    0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f
};

// Test-Samples und die korrekten Antworten
float* test_samples[] = { sample_digit_2, sample_digit_6, sample_digit_7};
const int correct_labels[] = { 2, 6, 7 };


// TAG für das ESP-IDF Logging-System
static const char* TAG = "MNIST_CLASSIFIER";

extern "C" void app_main(void)
{
    vTaskDelay(2000 / portTICK_PERIOD_MS);
    
    ESP_LOGI(TAG, "╔════════════════════════════════════════╗");
    ESP_LOGI(TAG, "║  ESP32 TinyML - MNIST Ziffernerkennung ║");
    ESP_LOGI(TAG, "╚════════════════════════════════════════╝\n");
    
    ESP_LOGI(TAG, "⏳ Lade TensorFlow Lite Modell...");
    
    // 1. Lade das Modell aus dem C-Array
    model = tflite::GetModel(mnist_cnn_tflite); 
    if (model->version() != TFLITE_SCHEMA_VERSION) {
        ESP_LOGE(TAG, "❌ FEHLER: Modell-Version ist inkompatibel!");
        while (1) vTaskDelay(100);
    }

    // 2. Erstelle den OpResolver (Deine Version hatte 4, aber es sind 6 Operatoren)
    tflite::MicroMutableOpResolver<9> op_resolver;

    if (op_resolver.AddShape() != kTfLiteOk) { ESP_LOGE(TAG, "Fehler bei AddShapee"); return; }
    if (op_resolver.AddStridedSlice() != kTfLiteOk) { ESP_LOGE(TAG, "Fehler bei AddStridedSlice"); return; }
    if (op_resolver.AddPack() != kTfLiteOk) { ESP_LOGE(TAG, "Fehler bei AddPack"); return; }
    if (op_resolver.AddConv2D() != kTfLiteOk) { ESP_LOGE(TAG, "Fehler bei AddConv2D"); return; }
    if (op_resolver.AddRelu() != kTfLiteOk) { ESP_LOGE(TAG, "Fehler bei AddRelu"); return; }
    if (op_resolver.AddMaxPool2D() != kTfLiteOk) { ESP_LOGE(TAG, "Fehler bei AddMaxPool2D"); return; }
    if (op_resolver.AddReshape() != kTfLiteOk) { ESP_LOGE(TAG, "Fehler bei AddReshape"); return; }
    if (op_resolver.AddFullyConnected() != kTfLiteOk) { ESP_LOGE(TAG, "Fehler bei AddFullyConnected"); return; }
    if (op_resolver.AddSoftmax() != kTfLiteOk) { ESP_LOGE(TAG, "Fehler bei AddSoftmax"); return; }

    tensor_arena = (uint8_t*) malloc(kTensorArenaSize);
    if (tensor_arena == nullptr) {
        ESP_LOGE(TAG, "❌ FEHLER: Konnte die Tensor Arena auf dem Heap nicht allozieren!");
        return; // Programm hier beenden
    }
    ESP_LOGI(TAG, "✓ Tensor Arena (%d Bytes) erfolgreich auf dem Heap alloziert.", kTensorArenaSize);


    // 3. Erstelle den Interpreter
    static tflite::MicroInterpreter static_interpreter(model, op_resolver, tensor_arena, kTensorArenaSize);
    interpreter = &static_interpreter;

    // 4. Reserviere den Speicher (Tensor Arena)
    if (interpreter->AllocateTensors() != kTfLiteOk) {
        ESP_LOGE(TAG, "❌ FEHLER: AllocateTensors() fehlgeschlagen!");
        while (1) vTaskDelay(100);
    }

    // 5. Hole Zeiger auf die Ein- und Ausgabe-Tensoren
    input = interpreter->input(0);
    output = interpreter->output(0);
    
    ESP_LOGI(TAG, "✓ Modell erfolgreich geladen!\n");
    
    // Validierungs-Tests
    ESP_LOGI(TAG, "🧪 Validierungs-Tests:\n");
    ESP_LOGI(TAG, "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━");
    ESP_LOGI(TAG, "  Testfall  │  Vorhergesagt  │  Korrekt?   │  Inferenzzeit (µs) ");
    ESP_LOGI(TAG, "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━");
    
    int correct_predictions = 0;
    int num_tests = sizeof(correct_labels) / sizeof(correct_labels[0]);

    for (int i = 0; i < num_tests; i++) {
        memcpy(input->data.f, test_samples[i], kInputSize * sizeof(float));

        // ===================================================================
        // HIER STARTET DIE ZEITMESSUNG
        // ===================================================================
        int64_t start_time = esp_timer_get_time();

        if (interpreter->Invoke() != kTfLiteOk) {
            ESP_LOGE(TAG, "❌ FEHLER: Invoke() fehlgeschlagen!");
            continue;
        }

        // ===================================================================
        // HIER ENDET DIE ZEITMESSUNG
        // ===================================================================
        int64_t end_time = esp_timer_get_time();
        int64_t inference_time = end_time - start_time;


        int predicted_digit = -1;
        float max_probability = 0.0;
        for (int j = 0; j < kOutputSize; j++) {
            float current_prob = output->data.f[j];
            if (current_prob > max_probability) {
                max_probability = current_prob;
                predicted_digit = j;
            }
        }
        
        bool is_correct = (predicted_digit == correct_labels[i]);
        if (is_correct) {
            correct_predictions++;
        }

        // NEU: Gib die gemessene Zeit in der Tabelle aus
        ESP_LOGI(TAG, "    Ziffer %d   │       %d        │     %s      │  %lld", 
                     correct_labels[i], predicted_digit, is_correct ? "Ja ✓ " : "Nein ❌", inference_time);
    }

    ESP_LOGI(TAG, "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━");
    float accuracy = (float)correct_predictions / num_tests * 100.0;
    ESP_LOGI(TAG, "\n📊 Genauigkeit: %.2f%% (%d von %d korrekt)\n\n", accuracy, correct_predictions, num_tests);

    ESP_LOGI(TAG, "╔════════════════════════════════════════╗");
    ESP_LOGI(TAG, "║  ✓ Testdurchlauf abgeschlossen!        ║");
    ESP_LOGI(TAG, "╚════════════════════════════════════════╝\n");

    // Entspricht der leeren loop() Funktion
    while(1) {
        vTaskDelay(1000 / portTICK_PERIOD_MS);
    }
}